'use strict';

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _requests = require('./requests');

var _requests2 = _interopRequireDefault(_requests);

var _resources = require('./resources');

var _resources2 = _interopRequireDefault(_resources);

var _entitlements = require('./entitlements');

var _entitlements2 = _interopRequireDefault(_entitlements);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var requestPromise = _bluebird2.default.promisifyAll(require('request'));

/* istanbul ignore next */
module.exports = {
  getAllCatalogItems: getAllCatalogItems,
  getCatalogItemByName: getCatalogItemByName,
  getCatalogItemTemplate: getCatalogItemTemplate,
  submitRequest: _requests2.default.submitRequest,
  getRequestsByCatalogItemName: _requests2.default.getRequestsByCatalogItemName,
  getRequest: _requests2.default.getRequest,
  getRequests: _requests2.default.getRequests,
  sendRequestViaUrl: _requests2.default.sendRequestViaUrl,
  getResources: _resources2.default.getResources,
  getResourceByName: _resources2.default.getResourceByName,
  getResourceById: _resources2.default.getResourceById,
  getResourceActions: _resources2.default.getResourceActions,
  getResourceActionTemplate: _resources2.default.getResourceActionTemplate,
  getResourceActionRequests: _resources2.default.getResourceActionRequests,
  submitResourceAction: _resources2.default.submitResourceAction,
  getEntitlementByName: _entitlements2.default.getEntitlementByName,
  updateEntitlement: _entitlements2.default.updateEntitlement

};

function getAllCatalogItems() {
  var _this = this;

  return new _bluebird2.default(function (resolve, reject) {
    var options = {
      method: 'GET',
      agent: _this.config.agent,
      url: 'https://' + _this.config.hostname + '/catalog-service/api/consumer/entitledCatalogItemViews?limit=1000',
      headers: {
        'cache-control': 'no-cache',
        'content-type': 'application/json',
        'authorization': 'Bearer ' + _this.config.token
      },
      body: {},
      json: true
    };

    requestPromise.getAsync(options).then(function (response) {
      if (response.statusCode !== 200) {
        return reject(response.body);
      }

      var items = [];
      response.body.content.forEach(function (item) {
        var res = {};
        res.name = item.name;
        res.id = item.catalogItemId;
        res.submitRequestUrl = item.links[1].href;
        res.submitRequestUrlMethod = item.links[1].rel;
        // res.catalogResourceLabel = item.catalogResource.label
        // res.catalogResourceId = item.catalogResource.id
        items.push(res);
      }, this);
      resolve(items);
    }).catch(function (error) {
      reject(error);
    });
  });
}

function getCatalogItemByName(name) {
  var _this = this;

  return new _bluebird2.default(function (resolve, reject) {
    var options = {
      method: 'GET',
      agent: _this.config.agent,
      url: 'https://' + _this.config.hostname + '/catalog-service/api/consumer/entitledCatalogItemViews?limit=1000&$filter=(name eq \'' + name + '\')',
      headers: {
        'cache-control': 'no-cache',
        'content-type': 'application/json',
        'authorization': 'Bearer ' + _this.config.token
      },
      body: {},
      json: true
    };

    requestPromise.getAsync(options).then(function (response) {
      if (response.statusCode !== 200) {
        return reject(response.body);
      } else {
        resolve(response.body.content[0]);
      }
    }).catch(function (error) {
      reject(error);
    });
  });
}

function getCatalogItemTemplate(url) {
  var _this = this;

  return new _bluebird2.default(function (resolve, reject) {
    var options = {
      method: 'GET',
      agent: _this.config.agent,
      url: url,
      headers: {
        'cache-control': 'no-cache',
        'content-type': 'application/json',
        'authorization': 'Bearer ' + _this.config.token
      },
      body: {},
      json: true
    };

    requestPromise.getAsync(options).then(function (response) {
      if (response.statusCode !== 200) {
        return reject(response.body);
      }
      return resolve(response.body);
    }).catch(function (error) {
      reject(error);
    });
  });
}
//# sourceMappingURL=index.js.map