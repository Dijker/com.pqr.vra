{"version":3,"sources":["../../src/identity/index.js"],"names":["requestPromise","promisifyAll","require","module","exports","getTokenId","isTokenAuthorized","tokenId","_this","resolve","reject","options","method","agent","config","url","hostname","headers","headAsync","then","response","statusCode","catch","error","rejectUnauthorized","requestCert","body","username","password","tenant","json","postAsync","token","id","process","env","VRA_TOKEN","errors","systemMessage"],"mappings":";;AAAA;;;;;;AACA,IAAIA,iBAAiB,mBAAQC,YAAR,CAAqBC,QAAQ,SAAR,CAArB,CAArB;;AAEAC,OAAOC,OAAP,GAAiB;AACfC,cAAYA,UADG;AAEfC,qBAAmBA;;AAGrB;;;;;AALiB,CAAjB,CAUA,SAASA,iBAAT,CAA4BC,OAA5B,EAAqC;AACnC,MAAIC,QAAQ,IAAZ;;AAEA,SAAO,uBAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,QAAIC,UAAU;AACZC,cAAQ,MADI;AAEZC,aAAOL,MAAMM,MAAN,CAAaD,KAFR;AAGZE,wBAAgBP,MAAMM,MAAN,CAAaE,QAA7B,6BAA6DT,OAHjD;AAIZU,eAAS;AACP,yBAAiB,YAAYV,OADtB;AAEP,wBAAgB;AAFT;AAJG,KAAd;;AAUAP,mBAAekB,SAAf,CAAyBP,OAAzB,EACGQ,IADH,CACQ,UAAUC,QAAV,EAAoB;AACxB,UAAIA,YAAYA,SAASC,UAAT,KAAwB,GAAxC,EAA6C;AAC3CZ,gBAAQ,IAAR;AACD,OAFD,MAEO;AACLA,gBAAQ,KAAR;AACD;AACF,KAPH,EAQGa,KARH,CAQS,UAAUC,KAAV,EAAiB;AACtBb,aAAOa,KAAP;AACD,KAVH;AAWD,GAtBM,CAAP;AAuBD;;AAED;;;;AAIA,SAASlB,UAAT,GAAuB;AACrB,MAAIG,QAAQ,IAAZ;;AAEA,SAAO,uBAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,QAAIC,UAAU;AACZC,cAAQ,MADI;AAEZC,aAAOL,MAAMM,MAAN,CAAaD,KAFR;AAGZE,wBAAgBP,MAAMM,MAAN,CAAaE,QAA7B,yBAHY;AAIZQ,0BAAoB,KAJR;AAKZC,mBAAa,IALD;AAMZR,eAAS;AACP,yBAAiB,UADV;AAEP,wBAAgB;AAFT,OANG;AAUZS,YAAM;AACJC,kBAAUnB,MAAMM,MAAN,CAAaa,QADnB;AAEJC,kBAAUpB,MAAMM,MAAN,CAAac,QAFnB;AAGJC,gBAAQrB,MAAMM,MAAN,CAAae;AAHjB,OAVM;AAeZC,YAAM;AAfM,KAAd;;AAkBA9B,mBAAe+B,SAAf,CAAyBpB,OAAzB,EACGQ,IADH,CACQ,UAAUC,QAAV,EAAoB;AACxB;AACAZ,YAAMM,MAAN,CAAac,QAAb,GAAwB,EAAxB;;AAEA,UAAIR,SAASC,UAAT,KAAwB,GAA5B,EAAiC;AAC/Bb,cAAMM,MAAN,CAAakB,KAAb,GAAqBZ,SAASM,IAAT,CAAcO,EAAnC;AACAC,gBAAQC,GAAR,CAAYC,SAAZ,GAAwB5B,MAAMM,MAAN,CAAakB,KAArC;AACAvB,gBAAQW,SAASM,IAAT,CAAcO,EAAtB;AACD,OAJD,MAIO;AACLvB,eAAOU,SAASM,IAAT,CAAcW,MAAd,CAAqB,CAArB,EAAwBC,aAA/B;AACD;AACF,KAZH,EAaGhB,KAbH,CAaS,UAAUC,KAAV,EAAiB;AACtBb,aAAOa,KAAP;AACD,KAfH;AAgBD,GAnCM,CAAP;AAoCD","file":"index.js","sourcesContent":["import Promise from 'bluebird'\nvar requestPromise = Promise.promisifyAll(require('request'))\n\nmodule.exports = {\n  getTokenId: getTokenId,\n  isTokenAuthorized: isTokenAuthorized\n}\n\n/**\n * Validate if a token is still valid\n * @param {*} tokenId  - The token to be validated\n * @returns {boolean} - True if the token is still valid, false otherwise\n */\nfunction isTokenAuthorized (tokenId) {\n  var _this = this\n\n  return new Promise(function (resolve, reject) {\n    var options = {\n      method: 'HEAD',\n      agent: _this.config.agent,\n      url: `https://${_this.config.hostname}/identity/api/tokens/${tokenId}`,\n      headers: {\n        'authorization': 'Bearer ' + tokenId,\n        'content-type': 'application/json'\n      }\n    }\n\n    requestPromise.headAsync(options)\n      .then(function (response) {\n        if (response && response.statusCode === 204) {\n          resolve(true)\n        } else {\n          resolve(false)\n        }\n      })\n      .catch(function (error) {\n        reject(error)\n      })\n  })\n}\n\n/**\n * Retrieve a token\n * @returns {Promise} - The retrieved token\n */\nfunction getTokenId () {\n  var _this = this\n\n  return new Promise(function (resolve, reject) {\n    var options = {\n      method: 'POST',\n      agent: _this.config.agent,\n      url: `https://${_this.config.hostname}/identity/api/tokens`,\n      rejectUnauthorized: false,\n      requestCert: true,\n      headers: {\n        'cache-control': 'no-cache',\n        'content-type': 'application/json'\n      },\n      body: {\n        username: _this.config.username,\n        password: _this.config.password,\n        tenant: _this.config.tenant\n      },\n      json: true\n    }\n\n    requestPromise.postAsync(options)\n      .then(function (response) {\n        // clear here to prevent password from being populated further than this request\n        _this.config.password = ''\n\n        if (response.statusCode === 200) {\n          _this.config.token = response.body.id\n          process.env.VRA_TOKEN = _this.config.token\n          resolve(response.body.id)\n        } else {\n          reject(response.body.errors[0].systemMessage)\n        }\n      })\n      .catch(function (error) {\n        reject(error)\n      })\n  })\n}\n"]}