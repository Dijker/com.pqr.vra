'use strict';

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var requestPromise = _bluebird2.default.promisifyAll(require('request'));

module.exports = {
  getFromTenant: getFromTenant,
  exportPackage: exportPackage,
  createPackage: createPackage,
  getPackageById: getPackageById,
  deletePackage: deletePackage
};

function getFromTenant(tenantId, limit) {
  var _this = this;
  limit = limit || 1000;
  return new _bluebird2.default(function (resolve, reject) {
    var options;
    options = {
      method: 'GET',
      agent: _this.config.agent,
      url: 'https://' + _this.config.hostname + '/content-management-service/api/contents/?limit=' + limit + '&$filter=(tenantId eq \'' + tenantId + '\')',
      headers: {
        'cache-control': 'no-cache',
        'authorization': 'Bearer ' + _this.config.token
      },
      json: true
    };

    requestPromise.getAsync(options).then(function (response) {
      return resolve(response);
    }).catch(function (error) {
      reject(error);
    });
  });
}

function exportPackage(contentZipPath, resolutionMode) {
  var _this = this;

  return new _bluebird2.default(function (resolve, reject) {
    var options;

    options = {
      method: 'POST',
      agent: _this.config.agent,
      url: 'https://' + _this.config.hostname + '/content-management-service/api/packages/?resolutionMode=' + resolutionMode,
      headers: {
        'cache-control': 'no-cache',
        'authorization': 'Bearer ' + _this.config.token
      },
      formData: { file: _fs2.default.createReadStream(contentZipPath) },
      json: true
    };

    requestPromise.postAsync(options).then(function (response) {
      return resolve(response);
    }).catch(function (error) {
      reject(error);
    });
  });
}

function createPackage(packageName, tenantId, contents) {
  var _this = this;

  return new _bluebird2.default(function (resolve, reject) {
    var options;

    options = {
      method: 'POST',
      agent: _this.config.agent,
      url: 'https://' + _this.config.hostname + '/content-management-service/api/packages',
      headers: {
        'cache-control': 'no-cache',
        'authorization': 'Bearer ' + _this.config.token,
        'accept': 'application/json'
      },
      body: {
        name: packageName,
        contents: contents,
        tenantId: tenantId
      },
      json: true
    };

    requestPromise.postAsync(options).then(function (response) {
      return resolve(response);
    }).catch(function (error) {
      reject(error);
    });
  });
}

function getPackageById(id) {
  var _this = this;

  return new _bluebird2.default(function (resolve, reject) {
    var options;

    options = {
      method: 'GET',
      agent: _this.config.agent,
      url: 'https://' + _this.config.hostname + '/content-management-service/api/packages/' + id,
      headers: {
        'cache-control': 'no-cache',
        'authorization': 'Bearer ' + _this.config.token,
        'accept': 'application/zip'
      },
      encoding: null
    };

    requestPromise.getAsync(options).then(function (response) {
      return resolve(response);
    }).catch(function (error) {
      reject(error);
    });
  });
}

function deletePackage(id) {
  var _this = this;

  return new _bluebird2.default(function (resolve, reject) {
    var options;

    options = {
      method: 'DELETE',
      agent: _this.config.agent,
      url: 'https://' + _this.config.hostname + '/content-management-service/api/packages/' + id,
      headers: {
        'cache-control': 'no-cache',
        'authorization': 'Bearer ' + _this.config.token,
        'accept': 'application/json'
      },
      json: true
    };

    requestPromise.deleteAsync(options).then(function (response) {
      return resolve(response);
    }).catch(function (error) {
      reject(error);
    });
  });
}
//# sourceMappingURL=content.js.map